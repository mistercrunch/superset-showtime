name: ðŸŽª Superset Showtime

# Ultra-simple: just sync on any PR state change
on:
  pull_request_target:
    types: [labeled, unlabeled, synchronize, closed]
  
  # Manual testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to sync'
        required: true
        type: number
      sha:
        description: 'Specific SHA to deploy (optional, defaults to latest)'
        required: false
        type: string

# Common environment variables for all jobs
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  GITHUB_ORG: ${{ github.repository_owner }}
  GITHUB_REPO: ${{ github.event.repository.name }}
  GITHUB_ACTOR: ${{ github.actor }}
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  sync:
    name: ðŸŽª Sync PR to desired state
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Install Superset Showtime
        run: pip install superset-showtime

      - name: Check what actions are needed
        id: check
        run: |
          PR_NUM=${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          OUTPUT=$(python -m showtime sync $PR_NUM --check-only)
          echo "$OUTPUT"
          
          # Extract outputs for conditional steps
          ACTION=$(echo "$OUTPUT" | grep "action_needed=" | cut -d'=' -f2)
          BUILD=$(echo "$OUTPUT" | grep "build_needed=" | cut -d'=' -f2)
          DEPLOY=$(echo "$OUTPUT" | grep "deploy_needed=" | cut -d'=' -f2)
          
          echo "action_needed=$ACTION" >> $GITHUB_OUTPUT
          echo "build_needed=$BUILD" >> $GITHUB_OUTPUT
          echo "deploy_needed=$DEPLOY" >> $GITHUB_OUTPUT

      - name: Setup Docker Environment
        if: steps.check.outputs.build_needed == 'true'
        uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ env.DOCKERHUB_USER }}
          dockerhub-token: ${{ env.DOCKERHUB_TOKEN }}
          build: "true"

      - name: Setup supersetbot  
        if: steps.check.outputs.build_needed == 'true'
        uses: ./.github/actions/setup-supersetbot/

      - name: Get PR SHA for build
        if: steps.check.outputs.build_needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            let sha;
            
            // Check for SHA override from workflow_dispatch
            if ("${{ github.event.inputs.sha }}") {
              sha = "${{ github.event.inputs.sha }}";
              console.log(`Using override SHA: ${sha}`);
            } else {
              // Use latest SHA from PR
              const prNumber = "${{ github.event.pull_request.number || github.event.inputs.pr_number }}";
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              sha = pr.head.sha;
              console.log(`Using latest SHA: ${sha}`);
            }
            
            core.exportVariable("PR_SHA", sha);

      - name: Checkout PR code
        if: steps.check.outputs.build_needed == 'true' 
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_SHA }}
          persist-credentials: false

      - name: Build Docker image
        if: steps.check.outputs.build_needed == 'true'
        run: |
          supersetbot docker \
            --push \
            --load \
            --preset ci \
            --platform linux/amd64 \
            --context-ref "${{ env.PR_SHA }}" \
            --extra-flags "--build-arg INCLUDE_CHROMIUM=false --build-arg LOAD_EXAMPLES_DUCKDB=true"

      - name: Execute sync deployment
        if: steps.check.outputs.deploy_needed == 'true'
        run: |
          PR_NUM=${{ github.event.pull_request.number || github.event.inputs.pr_number }}
          if [[ -n "${{ github.event.inputs.sha }}" ]]; then
            python -m showtime sync $PR_NUM --deploy --sha "${{ github.event.inputs.sha }}"
          else
            python -m showtime sync $PR_NUM --deploy
          fi